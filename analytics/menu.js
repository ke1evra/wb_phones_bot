const moment = require('moment');
const API = require('../analytics/data-manager.js');
const axios = require('axios');
const icons = require('./numberIcons.js');
const codes = require('../constants/disconnect-reasons-codes');

class Button {
    constructor(text, cb) {
        this.btn = {text: text, callback_data: cb}
    }
}

class Menu {
    constructor() {
        this.year = moment().format('YYYY');
        this.month = moment().format('MM')
    }

    async renderMissedCalls(days) {
        const data = await API.getMissedCalls(days);
        // console.log(data);
        let message = '–°–ø–∏—Å–æ–∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤: \n ---------------------------\n';
        const menu = [];
        // console.log(data);

        data.data.map((item, index) => {
            const orderNum = `${item.order_number ? '\n–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ' + item.order_number : ''}`;
            const clientName = `${item.client_name ? ' | ' + item.client_name : ''}`;
            const missedAt = moment(item.missed_at).format('DD.MM HH:mm');
            message += `${index + 1}. ${item.client} ( ${missedAt} )\n–ü–æ–ø—ã—Ç–æ–∫ –¥–æ–∑–≤–æ–Ω–∞: ${item.nedozvon_cnt}\n–õ–∏–Ω–∏—è: ${item.line_number}${orderNum}${clientName} \n---------------------------\n`;
            menu.push(new Button(item.client_name, 'some cb'))
        });
        let options = {
            reply_markup: JSON.stringify({
                inline_keyboard: [
                    menu,
                ]
            }),
            // disable_web_page_preview: true,
        };
        if (!data.data.length)
            message = '–ù–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤';
        return message;
    }
    ///–§—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ProcessBar. "title"-–°—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞. "value"- –ø—Ä–æ—Ü–µ–Ω—Ç(—á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 1)
    renderPercentage(title="",value=0){
        try {
            if(value>1 ||value<0)
            {
                console.log(`–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ renderPercentage: –ó–Ω–∞—á–µ–Ω–∏–µ "value"=${value} –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ —Ä–∞–º–∫–∏ –æ—Ç 0 –¥–æ 1!`)
                return "ERROR";
            }
            let msg=`${title} (${(value*100).toFixed(2)}%)\n`;
            for(let i=0;i<value;i+=0.05)
                msg+='üü©';
            for(let i=1-value;i>0;i-=0.05)
                msg+='‚¨úÔ∏è';
            return msg;
        }catch (e) {
            console.log(`–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ renderPercentage: ${e}`);
            return "ERROR";
        }
    }
    async renderExpenses(days) {
        const data = await API.getExpenses(days);
        // console.log(data);
        let message = '–°–ø–∏—Å–æ–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤: \n ---------------------------\n';
        const menu = [];
        // console.log(data);

        data.data.map((item, index) => {
            message += `${index + 1}. (${item.date})\n–Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç: ${item.yandexmarket}\n–Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç: ${item.yandexdirect}\nGoogle Ads: ${item.googleads}\n–í—Å–µ–≥–æ: ${item['total']} \n---------------------------\n`;
            menu.push(new Button(item.client_name, 'some cb'))
        });
        let options = {
            reply_markup: JSON.stringify({
                inline_keyboard: [
                    menu,
                ]
            }),
            // disable_web_page_preview: true,
        };
        if (!data.data.length)
            message = '–ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤';
        return message;
    }

    async renderManagers(days) {
        const data = await API.getManagers(days);
        // console.log(data);
        let message = '–ú–µ–Ω–µ–¥–∂–µ—Ä—ã:\n';
        const menu = [];
        //console.log(data.data["data1"]);

        data.data["data1"].map((item, index) => {
            message += `${index + 1}. ${item.call_type === 'inComing' ? `–í—Ö–æ–¥—è—â–∏–π` : '–ò—Å—Ö–æ–¥—è—â–∏–π'} –≤—ã–∑–æ–≤ –Ω–∞ –Ω–æ–º–µ—Ä ${item.to_number} (${item.person}) —Å –Ω–æ–º–µ—Ä–∞ ${item.from_number}\n${item.startFix} - ${item.endFix} (${item["start"]} - ${item["end"]})\n–ü—Ä–∏—á–∏–Ω–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: ${codes[item.disconnect_reason]} (${item.disconnect_reason})\n---------------------------\n`;
            menu.push(new Button(item.client_name, 'some cb'))
        });
        let options = {
            reply_markup: JSON.stringify({
                inline_keyboard: [
                    menu,
                ]
            }),
            // disable_web_page_preview: true,
        };
        if (!data.data["data1"].length)
            message = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
        return message;
    }

    async renderOrders(days) {
        try{
            let from = moment().subtract(days, "days").format("YYYY-MM-DD");
            let to = moment().endOf("day").format("YYYY-MM-DD")
            const data = await API.getOrdersCount(days);
            let message = `–°—á—ë—Ç—á–∏–∫ –ø–æ –∑–∞–∫–∞–∑–∞–º —Å ${from} –ø–æ ${to}: \n ---------------------------\n`;
            // console.log(data);
            //–û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            let orderTotalSum=0;
            let orderTotalCount=0;
            data.data.forEach((item)=>{
                orderTotalCount++;
                orderTotalSum+=item.order_sum;
            });
            message+=`–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ –ø–æ—Å—Ç—É–ø–∏–ª–æ ${orderTotalCount} –Ω–∞ —Å—É–º–º—É ${orderTotalSum}, –∏–∑ –Ω–∏—Ö:\n`
            data.data.map((item, index) => {
                message+=`${item.order_count} - `;
                message+=menu.renderPercentage(item.order_status,item.order_count/orderTotalCount);
                message+='\n';
            });
            if (!data.data.length)
                message = `–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å ${from} –ø–æ ${to}.`;
            return message;
        }catch (e) {
            console.log(`–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ renderOrders:${e}`);
            return "";
        }

    }

    async renderCalls(days) {
        let from = moment().subtract(days, "days").format("YYYY-MM-DD");
        let to = moment().endOf("day").format("YYYY-MM-DD")
        const data = await API.getCalls(days);
        let message = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–≤–æ–Ω–∫–∞–º: \n ---------------------------\n';
        let statistics = [];
        // console.log(data);
        statistics['calls_count'] = 0
        statistics['calls_duration'] = 0;
        statistics['real_calls_count'] = 0;
        statistics['line_numbers'] = {};
        statistics['disconnect_reasons'] = {}
        statistics['disconnect_reasons']['total'] = {};
        statistics['disconnect_reasons']['–í—Ö–æ–¥—è—â–∏–π'] = {};
        statistics['disconnect_reasons']['–ò—Å—Ö–æ–¥—è—â–∏–π'] = {};
        statistics['disconnect_reasons']['–ù–µ–¥–æ–∑–≤–æ–Ω'] = {};
        statistics['disconnect_reasons']['–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π'] = {};

        statistics['–í—Ö–æ–¥—è—â–∏–π'] = {};
        statistics['–í—Ö–æ–¥—è—â–∏–π']['calls_duration'] = 0;
        statistics['–í—Ö–æ–¥—è—â–∏–π']['calls_count'] = 0;
        statistics['–í—Ö–æ–¥—è—â–∏–π']['time_before_answer'] = 0;

        statistics['–ò—Å—Ö–æ–¥—è—â–∏–π'] = {};
        statistics['–ò—Å—Ö–æ–¥—è—â–∏–π']['calls_duration'] = 0;
        statistics['–ò—Å—Ö–æ–¥—è—â–∏–π']['calls_count'] = 0;
        statistics['–ò—Å—Ö–æ–¥—è—â–∏–π']['time_before_answer'] = 0;

        statistics['–ù–µ–¥–æ–∑–≤–æ–Ω'] = {};
        statistics['–ù–µ–¥–æ–∑–≤–æ–Ω']['calls_duration'] = 0;
        statistics['–ù–µ–¥–æ–∑–≤–æ–Ω']['calls_count'] = 0;
        statistics['–ù–µ–¥–æ–∑–≤–æ–Ω']['time_before_finish'] = 0;

        statistics['–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π'] = {};
        statistics['–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π']['calls_duration'] = 0;
        statistics['–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π']['calls_count'] = 0;
        statistics['–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π']['time_before_finish'] = 0;

        data.data.forEach((call) => {
            statistics['calls_count']++;
            if (call.call_duration !== '') {
                statistics['calls_duration'] += parseFloat(call.call_duration);
                statistics['real_calls_count']++;
            }
            if (statistics['disconnect_reasons']['total'].hasOwnProperty(call.disconnect_reason))
                statistics['disconnect_reasons']['total'][call.disconnect_reason]++;
            else
                statistics['disconnect_reasons']['total'][call.disconnect_reason] = 1;
            //line_numbers
            if (statistics['line_numbers'].hasOwnProperty(call.line_number))
                statistics['line_numbers'][call.line_number]++;
            else
                statistics['line_numbers'][call.line_number] = 1;
            switch (call.call_type) {
                case '–í—Ö–æ–¥—è—â–∏–π':
                    statistics['–í—Ö–æ–¥—è—â–∏–π']['calls_count']++;
                    statistics['–í—Ö–æ–¥—è—â–∏–π']['calls_duration'] += parseFloat(call.call_duration);
                    statistics['–í—Ö–æ–¥—è—â–∏–π']['time_before_answer'] += parseFloat(call.answer_time);
                    //–ü—Ä–∏—á–∏–Ω—ã –¥–∏—Å–∫–æ–Ω–Ω–µ–∫—Ç–∞
                    if (statistics['disconnect_reasons']['–í—Ö–æ–¥—è—â–∏–π'].hasOwnProperty(call.disconnect_reason))
                        statistics['disconnect_reasons']['–í—Ö–æ–¥—è—â–∏–π'][call.disconnect_reason]++;
                    else
                        statistics['disconnect_reasons']['–í—Ö–æ–¥—è—â–∏–π'][call.disconnect_reason] = 1;
                    break;
                case '–ò—Å—Ö–æ–¥—è—â–∏–π':
                    statistics['–ò—Å—Ö–æ–¥—è—â–∏–π']['calls_count']++;
                    statistics['–ò—Å—Ö–æ–¥—è—â–∏–π']['calls_duration'] += parseFloat(call.call_duration);
                    statistics['–ò—Å—Ö–æ–¥—è—â–∏–π']['time_before_answer'] += parseFloat(call.answer_time);
                    //–ü—Ä–∏—á–∏–Ω—ã –¥–∏—Å–∫–æ–Ω–Ω–µ–∫—Ç–∞
                    if (statistics['disconnect_reasons']['–ò—Å—Ö–æ–¥—è—â–∏–π'].hasOwnProperty(call.disconnect_reason))
                        statistics['disconnect_reasons']['–ò—Å—Ö–æ–¥—è—â–∏–π'][call.disconnect_reason]++;
                    else
                        statistics['disconnect_reasons']['–ò—Å—Ö–æ–¥—è—â–∏–π'][call.disconnect_reason] = 1;
                    break;
                case '–ù–µ–¥–æ–∑–≤–æ–Ω':
                    statistics['–ù–µ–¥–æ–∑–≤–æ–Ω']['calls_count']++;
                    statistics['–ù–µ–¥–æ–∑–≤–æ–Ω']['time_before_finish'] += call.finish - call.start;
                    //–ü—Ä–∏—á–∏–Ω—ã –¥–∏—Å–∫–æ–Ω–Ω–µ–∫—Ç–∞
                    if (statistics['disconnect_reasons']['–ù–µ–¥–æ–∑–≤–æ–Ω'].hasOwnProperty(call.disconnect_reason))
                        statistics['disconnect_reasons']['–ù–µ–¥–æ–∑–≤–æ–Ω'][call.disconnect_reason]++;
                    else
                        statistics['disconnect_reasons']['–ù–µ–¥–æ–∑–≤–æ–Ω'][call.disconnect_reason] = 1;
                    break;
                case '–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π':
                    statistics['–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π']['calls_count']++;
                    statistics['–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π']['time_before_finish'] += parseFloat(call.finish) - parseFloat(call.start);
                    //–ü—Ä–∏—á–∏–Ω—ã –¥–∏—Å–∫–æ–Ω–Ω–µ–∫—Ç–∞
                    if (statistics['disconnect_reasons']['–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π'].hasOwnProperty(call.disconnect_reason))
                        statistics['disconnect_reasons']['–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π'][call.disconnect_reason]++;
                    else
                        statistics['disconnect_reasons']['–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π'][call.disconnect_reason] = 1;
                    break;
                default:
                    break;
            }
        });
        //—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message += `–ó–∞ –ø–µ—Ä–∏–æ–¥ —Å ${from} –ø–æ ${to} –±—ã–ª–æ —Å–æ–≤–µ—Ä—à–µ–Ω–æ: ${statistics.calls_count} –∑–≤–æ–Ω–∫–æ–≤,
–û–±—â–µ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é ${statistics.calls_duration} —Å–µ–∫—É–Ω–¥, 
–°—Ä–µ–¥–Ω–µ–π –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é: ${(statistics.calls_duration / statistics.real_calls_count).toFixed(2)} —Å–µ–∫—É–Ω–¥.
------------------------
–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–∏—á–∏–Ω–∞–º –æ–∫–æ–Ω—á–∞–Ω–∏—è–º –∑–≤–æ–Ω–∫–∞:`;
        for (let reason in statistics.disconnect_reasons.total) {
            message += `\n    ${codes[reason]}: ${statistics.disconnect_reasons.total[reason]},`
        }
        message += '\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∑–≤–æ–Ω–∫–æ–≤:';
        let call_types = ['–í—Ö–æ–¥—è—â–∏–π', '–ò—Å—Ö–æ–¥—è—â–∏–π', '–ù–µ–¥–æ–∑–≤–æ–Ω', '–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π'];
        for (let i in call_types) {
            message += `\n${call_types[i]}:`;
            message += `\n    –ß–∏—Å–ª–æ –∑–≤–æ–Ω–∫–æ–≤: ${statistics[call_types[i]].calls_count},`;
            if (['–í—Ö–æ–¥—è—â–∏–π', '–ò—Å—Ö–æ–¥—è—â–∏–π'].includes(call_types[i])) {
                message += `\n    –°—É–º–º–∞—Ä–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${statistics[call_types[i]].calls_duration} —Å`;
                message += `\n    –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${(statistics[call_types[i]].calls_duration / statistics[call_types[i]].calls_count).toFixed(2)} —Å`;
                message += `\n    –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –¥–æ –æ—Ç–≤–µ—Ç–∞: ${(statistics[call_types[i]].time_before_answer / statistics[call_types[i]].calls_count).toFixed(2)} —Å`;
            } else
                message += `\n    –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –¥–æ —Å–±—Ä–æ—Å–∞ –∑–≤–æ–Ω–∫–∞: ${(statistics[call_types[i]].time_before_finish / statistics[call_types[i]].calls_count).toFixed(2)} —Å`;
            message += `\n   –ü–æ –ø—Ä–∏—á–∏–Ω–∞–º –æ–∫–æ–Ω—á–∞–Ω–∏—è:`;
            for (let reason in statistics.disconnect_reasons[call_types[i]]) {
                message += `\n     ${codes[reason]}: ${statistics.disconnect_reasons[call_types[i]][reason]}`;
            }
        }
        if (!data.data.length)
            message = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–≤–æ–Ω–∫–∞–º –∑–∞ –ø–µ—Ä–∏–æ–¥.';
        return message;
    }
}

const menu = new Menu();

const messages = {
    hello:
        `
    –ü—Ä–∏–≤–µ—Ç üëã, —è VI (–°–æ–∫—Ä–∞—â–µ–Ω–Ω–æ –æ—Ç Vkostume Informer)
    –Ø —É–º–µ—é –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:
    /orders - –ø–æ –∑–∞–∫–∞–∑–∞–º
    /expenses - —Ä–∞—Å—Ö–æ–¥—É
    /calls - –ø–æ –∑–≤–æ–Ω–∫–∞–º 
    /managers - –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
    /missed - –ø–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º –∑–≤–æ–Ω–∫–∞–º
    `,
    orders: menu.renderOrders,
    missed: menu.renderMissedCalls,
    calls: menu.renderCalls,
    expenses: menu.renderExpenses,
    managers: menu.renderManagers
};


module.exports = messages;
